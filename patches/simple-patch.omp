; OM File Header - Saved 2022/09/07 21:52:20
; (7.0 :patc (om-make-point 38 10) (om-make-point 845 74) (om-make-point 756 822) "" 183 0 "2022/09/07 21:46:27" "2022/09/07 21:52:20")
; End File Header
; External resources 
; (list (list (quote :sound) "#P\"../out-files/out.wav\""))
(in-package :om)(load-lib-for (quote ("OM-pd")))(setf *om-current-persistent* (om-load-patch1 "simple-patch" (quote ((let ((box (om-load-boxcall (quote bastype) "aux 4" (quote t) (quote nil) (om-make-point 420 126) (om-make-point 51 32) 1320 "1320" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LIST" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 379 277) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 383 87) (om-make-point 44 32) (quote freq) "freq" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "X-APPEND" (quote x-append) (quote ((om-load-inputfun (quote input-funbox) "first element" "L1?" nil) (om-load-inputfun (quote input-funbox) "second element" "L2?" nil))) (om-make-point 381 164) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 470 299) (om-make-point 25 32) (quote t) "t" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 248 212) (om-make-point 79 32) "out.wav" "\"out.wav\"" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "TMPFILE" (quote tmpfile) (quote ((om-load-inputfun (quote input-funbox) "file name" "PATH" ""))) (om-make-point 261 251) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "SINGLE-ITEM-LIST" (quote single-item-list) (quote ((om-load-inputfun (quote input-funbox) "list of choices" "items" (list "uno" "dos" "tres")))) (om-make-point 22 146) (om-make-point 178 123) (let ((rep (om-make-dialog-item (quote single-item-list) (om-make-point 1 1) (om-make-point 154 107) "untitled" :range (quote ("spacialization-of-note.pd" "Space.pd" "Record.pd" "mk-senoide.pd" "mk-senoide-mp3.pd" "mk-note.pd" "Microtonal-Player.pd" "metronome.pd" "binaural.pd"))))) (setf (di-data rep) (quote ("spacialization-of-note.pd" "Space.pd" "Record.pd" "mk-senoide.pd" "mk-senoide-mp3.pd" "mk-note.pd" "Microtonal-Player.pd" "metronome.pd" "binaural.pd"))) (om-set-selected-item-index rep 3) rep) "x" nil (pairlis (quote (winsize winpos)) (list (om-make-point 335 275) (om-make-point 10 40))) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "PD-PATCHES-LIST" (quote pd-patches-list) (quote nil) (om-make-point 64 73) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "out.wav" (quote sound) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "a track index for multichannel mixing (0 = no specific track)" "tracknum" 0) (om-load-inputfun (quote input-funbox) "a list of markers (s)" "markers" nil))) (om-make-point 238 428) (om-make-point 421 192) (let ((newobj (let ((thesound (load-sound (om-make-pathname :directory (quote (:relative "out-files")) :device nil :host "C" :name "out" :type "wav") 0 1.0 0))) (when thesound (setf (markers thesound) (quote nil))) thesound))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "out.wav") (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (scale show-stems notechancolor? cmnpref obj-mode deltapict show-spectrum winpos winsize mode grillestep zoom player inport outport)) (list nil (quote t) nil (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) 0 (om-make-point 0 0) nil (om-make-point 400 20) (om-make-point 370 280) 0 nil 1 (quote :om-audio) nil nil)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "PD~" (quote pd~) (quote ((om-load-inputfun (quote input-funbox) "Use PD patches inside OM-Sharp" "PATCH" nil) (om-load-inputkeyword (quote input-keyword) "" "sound-out" (quote :sound-out) nil nil) (om-load-inputkeyword (quote input-keyword) "" "var" (quote :var) nil nil) (om-load-inputkeyword (quote input-keyword) "" "offline" (quote :offline) nil nil))) (om-make-point 120 339) (om-make-point 450 68) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((3 0 1 0 nil 0) (2 0 3 0 nil 0) (0 0 3 1 nil 0) (5 0 6 0 nil 0) (8 0 7 0 nil 0) (10 0 9 0 nil 0) (7 0 10 0 nil 0) (6 0 10 1 nil 0) (1 0 10 2 nil 0) (4 0 10 3 nil 0))) nil 7.0))