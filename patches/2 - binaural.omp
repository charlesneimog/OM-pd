; OM File Header - Saved 2022/12/02 12:49:56
; (7.01 :patc (om-make-point 334 10) (om-make-point 0 0) (om-make-point 1008 763) "" 183 0 nil "2022/12/02 12:49:56")
; End File Header
; External resources 
; (list (list (quote :sound) "#P\"../../../../Onedrive/Documents/MusicData/Samples/OrchideaSOL2020/Brass/Trumpet_C/ordinario/TpC-ord-A#4-mf-N-N.wav\"" "#P\"../../out-files/Sound-Binaural.wav\""))
(in-package :om)(load-lib-for (quote ("OM-pd")))(setf *om-current-persistent* (om-load-patch1 "2 - binaural" (quote ((let ((box (om-load-boxcomment "comment" (om-make-point 405 102) (quote "You need to install earplug~ in order to run this patch. Run the object pd-open-patches, then go to help->find-external and search for earplug~, then download and install it.") "" (om-make-point 21 601) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Liberation Sans" 13.333333333333333D0 :family "Liberation Sans" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "PD-OPEN-PATCHES" (quote pd-open-patches) (quote ((om-load-inputfun (quote input-funbox) "Use PD patches inside OM-Sharp" "PATCH" nil))) (om-make-point 43 516) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "TpC-ord-A#4-mf-N-N.wav" (quote sound) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "a track index for multichannel mixing (0 = no specific track)" "tracknum" 0) (om-load-inputfun (quote input-funbox) "a list of markers (s)" "markers" nil))) (om-make-point 143 21) (om-make-point 221 81) (let ((newobj (let ((thesound (load-sound (om-make-pathname :directory (quote (:absolute "home" "neimog" "Onedrive" "Documents" "MusicData" "Samples" "OrchideaSOL2020" "Brass" "Trumpet_C" "ordinario")) :device nil :host nil :name "TpC-ord-A#4-mf-N-N" :type "wav") 0 1.0 0))) (when thesound (setf (markers thesound) (quote nil))) thesound))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "TpC-ord-A#4-mf-N-N.wav") (set-tonalite newobj nil) newobj) "x" nil (pairlis (quote (outport inport player zoom grillestep mode winsize winpos show-spectrum deltapict obj-mode cmnpref notechancolor? show-stems scale)) (list nil nil (quote :om-audio) 1 nil 0 (om-make-point 776 492) (om-make-point 0 0) nil (om-make-point 0 0) 0 (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) nil (quote t) nil)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "Sound-Binaural.wav" (quote sound) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "a track index for multichannel mixing (0 = no specific track)" "tracknum" 0) (om-load-inputfun (quote input-funbox) "a list of markers (s)" "markers" nil))) (om-make-point 544 529) (om-make-point 419 130) (let ((newobj (let ((thesound (load-sound (om-make-pathname :directory (quote (:relative "out-files")) :device nil :host nil :name "Sound-Binaural" :type "wav") 0 1.0 0))) (when thesound (setf (markers thesound) (quote nil))) thesound))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "Sound-Binaural.wav") (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (scale show-stems notechancolor? cmnpref obj-mode deltapict show-spectrum winpos winsize mode grillestep zoom player inport outport)) (list nil (quote t) nil (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) 0 (om-make-point 0 0) nil (om-make-point 400 20) (om-make-point 1280 747) 0 nil 1 (quote :om-audio) nil nil)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 806 381) (om-make-point 25 32) (quote t) "t" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 698 379) (om-make-point 25 32) (quote t) "t" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 3" (quote list) (quote nil) (om-make-point 793 174) (om-make-point 100 32) (list (quote elevation) -40) "(elevation -40)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 684 174) (om-make-point 99 34) (list (quote azimuth) 150) "(azimuth 150)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LIST 2" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 741 259) (om-make-point 99 44) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list" (quote list) (quote nil) (om-make-point 425 221) (om-make-point 142 32) "Sound-Binaural.wav" "\"Sound-Binaural.wav\"" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "TMPFILE" (quote tmpfile) (quote ((om-load-inputfun (quote input-funbox) "file name" "PATH" ""))) (om-make-point 470 281) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "SINGLE-ITEM-LIST" (quote single-item-list) (quote ((om-load-inputfun (quote input-funbox) "list of choices" "items" (list "uno" "dos" "tres")))) (om-make-point 8 255) (om-make-point 178 137) (let ((rep (om-make-dialog-item (quote single-item-list) (om-make-point 1 1) (om-make-point 154 121) "untitled" :range (quote ("Patch Model - Manipulation of Audios.pd" "Patch Model - Generating Audios.pd" "3 - spacialization-of-note.pd" "1 - mk-senoide.pd"))))) (setf (di-data rep) (quote ("Patch Model - Manipulation of Audios.pd" "Patch Model - Generating Audios.pd" "3 - spacialization-of-note.pd" "1 - mk-senoide.pd"))) (om-set-selected-item-index rep 2) rep) "x" nil (pairlis (quote (winpos winsize)) (list (om-make-point 10 40) (om-make-point 335 275))) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "PD-PATCHES-LIST" (quote pd-patches-list) (quote nil) (om-make-point 50 174) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "PD~" (quote pd~) (quote ((om-load-inputfun (quote input-funbox) "Use PD patches inside OM-Sharp" "PATCH" nil) (om-load-inputkeyword (quote input-keyword) "" "sound-in" (quote :sound-in) nil nil) (om-load-inputkeyword (quote input-keyword) "" "sound-out" (quote :sound-out) nil nil) (om-load-inputkeyword (quote input-keyword) "" "var" (quote :var) nil nil) (om-load-inputkeyword (quote input-keyword) "" "offline" (quote :offline) nil nil) (om-load-inputkeyword (quote input-keyword) "" "verbose" (quote :verbose) nil nil))) (om-make-point 168 419) (om-make-point 756 68) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "OM-SOUND-FILE-NAME" (quote om-sound-file-name) (quote ((om-load-inputfun (quote input-funbox) "SELF" "SELF" nil))) (om-make-point 201 160) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((11 0 1 0 nil 0) (13 0 3 0 nil 0) (7 0 8 0 nil 0) (6 0 8 1 nil 0) (9 0 10 0 nil 0) (12 0 11 0 nil 0) (11 0 13 0 nil 0) (14 0 13 1 nil 0) (10 0 13 2 nil 0) (8 0 13 3 nil 0) (5 0 13 4 nil 0) (4 0 13 5 nil 0) (2 0 14 0 nil 0))) nil 7.01))
