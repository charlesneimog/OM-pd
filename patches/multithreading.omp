; OM File Header - Saved 2022/09/07 22:15:58
; (7.0 :patc (om-make-point 38 10) (om-make-point 728 55) (om-make-point 1114 912) "" 183 0 "2022/09/07 21:53:25" "2022/09/07 22:15:58")
; End File Header
(in-package :om)(load-lib-for (quote ("OM-pd")))(setf *om-current-persistent* (om-load-patch1 "multithreading" (quote ((let ((box (om-load-editor-box1 "TEXTFILE" (quote textfile) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "input data or text" "exp-list" nil) (om-load-inputfunmenu1 (quote input-funmenu) "append or supersede" "ed-mode" "supersede" (list (list "append" "append") (list "supersede" "supersede"))) (om-load-inputfunmenu1 (quote input-funmenu) "eval interpretation mode" "eval-mode" "list" (list (list "text" "text") (list "data list" "data") (list "list" "list") (list "value" "value"))))) (om-make-point 388 511) (om-make-point 396 288) (load-buffer-textfile (quote ("C:/USERS/NEIMOG/DOCUMENTS/OPENMUSIC/out-files/out743.wav" "C:/USERS/NEIMOG/DOCUMENTS/OPENMUSIC/out-files/out491.wav" "C:/USERS/NEIMOG/DOCUMENTS/OPENMUSIC/out-files/out1133.wav" "C:/USERS/NEIMOG/DOCUMENTS/OPENMUSIC/out-files/out868.wav" "C:/USERS/NEIMOG/DOCUMENTS/OPENMUSIC/out-files/out515.wav" "C:/USERS/NEIMOG/DOCUMENTS/OPENMUSIC/out-files/out861.wav" "C:/USERS/NEIMOG/DOCUMENTS/OPENMUSIC/out-files/out1181.wav" "C:/USERS/NEIMOG/DOCUMENTS/OPENMUSIC/out-files/out965.wav" "C:/USERS/NEIMOG/DOCUMENTS/OPENMUSIC/out-files/out1198.wav" "C:/USERS/NEIMOG/DOCUMENTS/OPENMUSIC/out-files/out750.wav" "C:/USERS/NEIMOG/DOCUMENTS/OPENMUSIC/out-files/out794.wav" "C:/USERS/NEIMOG/DOCUMENTS/OPENMUSIC/out-files/out1035.wav" "C:/USERS/NEIMOG/DOCUMENTS/OPENMUSIC/out-files/out976.wav" "C:/USERS/NEIMOG/DOCUMENTS/OPENMUSIC/out-files/out375.wav" "C:/USERS/NEIMOG/DOCUMENTS/OPENMUSIC/out-files/out743.wav" "C:/USERS/NEIMOG/DOCUMENTS/OPENMUSIC/out-files/out451.wav" "C:/USERS/NEIMOG/DOCUMENTS/OPENMUSIC/out-files/out419.wav" "C:/USERS/NEIMOG/DOCUMENTS/OPENMUSIC/out-files/out770.wav" "C:/USERS/NEIMOG/DOCUMENTS/OPENMUSIC/out-files/out466.wav" "C:/USERS/NEIMOG/DOCUMENTS/OPENMUSIC/out-files/out934.wav" "")) (quote textfile) "supersede" "list") nil nil (pairlis (quote (winsize winpos)) (list (om-make-point 335 275) (om-make-point 10 40))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "PD-OPEN-PATCHES" (quote pd-open-patches) (quote ((om-load-inputfun (quote input-funbox) "Use PD patches inside OM-Sharp" "PATCH" nil))) (om-make-point 54 341) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 4" (quote t) (quote nil) (om-make-point 556 343) (om-make-point 28 32) 4 "4" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "PD-MULTITHREADING" (quote pd-multithreading) (quote ((om-load-inputfun (quote input-funbox) "Use PD patches inside OM-Sharp" "PATCH-LIST" nil) (om-load-inputfun (quote input-funbox) "Number of Threads" "PATCHES-BY-THREAD" nil))) (om-make-point 490 404) nil (list (list "C:/USERS/NEIMOG/DOCUMENTS/OPENMUSIC/out-files/out743.wav" "C:/USERS/NEIMOG/DOCUMENTS/OPENMUSIC/out-files/out491.wav" "C:/USERS/NEIMOG/DOCUMENTS/OPENMUSIC/out-files/out1133.wav" "C:/USERS/NEIMOG/DOCUMENTS/OPENMUSIC/out-files/out868.wav" "C:/USERS/NEIMOG/DOCUMENTS/OPENMUSIC/out-files/out515.wav" "C:/USERS/NEIMOG/DOCUMENTS/OPENMUSIC/out-files/out861.wav" "C:/USERS/NEIMOG/DOCUMENTS/OPENMUSIC/out-files/out1181.wav" "C:/USERS/NEIMOG/DOCUMENTS/OPENMUSIC/out-files/out965.wav" "C:/USERS/NEIMOG/DOCUMENTS/OPENMUSIC/out-files/out1198.wav" "C:/USERS/NEIMOG/DOCUMENTS/OPENMUSIC/out-files/out750.wav" "C:/USERS/NEIMOG/DOCUMENTS/OPENMUSIC/out-files/out794.wav" "C:/USERS/NEIMOG/DOCUMENTS/OPENMUSIC/out-files/out1035.wav" "C:/USERS/NEIMOG/DOCUMENTS/OPENMUSIC/out-files/out976.wav" "C:/USERS/NEIMOG/DOCUMENTS/OPENMUSIC/out-files/out375.wav" "C:/USERS/NEIMOG/DOCUMENTS/OPENMUSIC/out-files/out743.wav" "C:/USERS/NEIMOG/DOCUMENTS/OPENMUSIC/out-files/out451.wav" "C:/USERS/NEIMOG/DOCUMENTS/OPENMUSIC/out-files/out419.wav" "C:/USERS/NEIMOG/DOCUMENTS/OPENMUSIC/out-files/out770.wav" "C:/USERS/NEIMOG/DOCUMENTS/OPENMUSIC/out-files/out466.wav" "C:/USERS/NEIMOG/DOCUMENTS/OPENMUSIC/out-files/out934.wav")) "x" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 583 206) (om-make-point 36 32) 20 "20" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 527 106) (om-make-point 43 32) 300 "300" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 576 89) (om-make-point 51 32) 1200 "1200" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM-RANDOM" (quote om-random) (quote ((om-load-inputfun (quote input-funbox) "min" "LOW" 300) (om-load-inputfun (quote input-funbox) "max" "HIGH" 1200))) (om-make-point 526 148) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "REPEAT-N" (quote repeat-n) (quote ((om-load-inputfun (quote input-funbox) "something" "SELF" 1) (om-load-inputfun (quote input-funbox) "times" "N" 40))) (om-make-point 544 238) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "MAPCAR" (quote mapcar) (quote ((om-load-inputfun (quote input-funbox) "FUNCTION" "FUNCTION" nil) (om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 461 354) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "multithreading" (om-load-patch-abs1 "multithreading" (quote ((let ((box (om-load-boxcall (quote genfun) "PD-MK-LINE" (quote pd-mk-line) (quote ((om-load-inputfun (quote input-funbox) "Use PD patches inside OM-Sharp" "PATCH" nil) (om-load-inputkeyword (quote input-keyword) "" "sound-out" (quote :sound-out) nil nil) (om-load-inputkeyword (quote input-keyword) "" "var" (quote :var) nil nil) (om-load-inputkeyword (quote input-keyword) "" "offline" (quote :offline) nil nil))) (om-make-point 162 330) (om-make-point 373 68) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input 2" 1 (om-make-point 615 50) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 50 92) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 322 422) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "WRITE-TO-STRING" (quote write-to-string) (quote ((om-load-inputfun (quote input-funbox) "OBJECT" "OBJECT" nil))) (om-make-point 409 64) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 5" (quote t) (quote nil) (om-make-point 327 66) (om-make-point 59 32) ".wav" "\".wav\"" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 266 66) (om-make-point 51 32) "out" "\"out\"" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "STRING+" (quote string+) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" "out") (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 264 173) (om-make-point 103 44) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "TMPFILE" (quote tmpfile) (quote ((om-load-inputfun (quote input-funbox) "file name" "PATH" ""))) (om-make-point 289 227) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 498 245) (om-make-point 25 32) (quote t) "t" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "X-APPEND" (quote x-append) (quote ((om-load-inputfun (quote input-funbox) "first element" "L1?" nil) (om-load-inputfun (quote input-funbox) "second element" "L2?" nil))) (om-make-point 409 209) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 411 170) (om-make-point 44 32) (quote freq) "freq" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LIST" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 426 275) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((2 0 0 0 nil 0) (8 0 0 1 nil 0) (12 0 0 2 nil 0) (9 0 0 3 nil 0) (0 0 3 0 nil 0) (1 0 4 0 nil 0) (6 0 7 0 nil 0) (4 0 7 1 nil 0) (5 0 7 2 nil 0) (7 0 8 0 nil 0) (11 0 10 0 nil 0) (1 0 10 1 nil 0) (10 0 12 0 nil 0))) 7.0 nil "" (om-make-point 200 200) (om-make-point 713 486)) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil) (om-load-inputfun (quote input-funbox) "" "input 2" nil))) (om-make-point 2380/11 3004/11) (om-make-point 262 68) (list nil) "l" "multithreading"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "SINGLE-ITEM-LIST" (quote single-item-list) (quote ((om-load-inputfun (quote input-funbox) "list of choices" "items" (list "uno" "dos" "tres")))) (om-make-point 22 146) (om-make-point 178 123) (let ((rep (om-make-dialog-item (quote single-item-list) (om-make-point 1 1) (om-make-point 154 107) "untitled" :range (quote ("spacialization-of-note.pd" "Space.pd" "Record.pd" "mk-senoide.pd" "mk-senoide-mp3.pd" "mk-note.pd" "Microtonal-Player.pd" "metronome.pd" "binaural.pd"))))) (setf (di-data rep) (quote ("spacialization-of-note.pd" "Space.pd" "Record.pd" "mk-senoide.pd" "mk-senoide-mp3.pd" "mk-note.pd" "Microtonal-Player.pd" "metronome.pd" "binaural.pd"))) (om-set-selected-item-index rep 3) rep) "x" nil (pairlis (quote (winsize winpos)) (list (om-make-point 335 275) (om-make-point 10 40))) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "PD-PATCHES-LIST" (quote pd-patches-list) (quote nil) (om-make-point 64 73) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((3 0 0 1 nil 0) (11 0 1 0 nil 0) (9 0 3 0 nil 0) (2 0 3 1 nil 0) (5 0 7 0 nil 0) (6 0 7 1 nil 0) (7 0 8 0 nil 0) (4 0 8 1 nil 0) (10 0 9 0 nil 0) (8 0 9 1 nil 0) (11 0 10 0 nil 0) (12 0 11 0 nil 0))) nil 7.0))