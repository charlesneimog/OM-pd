; OM File Header - Saved 2022/12/02 12:49:56
; (7.01 :patc (om-make-point 38 10) (om-make-point 0 0) (om-make-point 1114 803) "" 183 0 nil "2022/12/02 12:49:56")
; End File Header
; External resources 
; (list (list (quote :sound) "#P\"../../out-files/Audio_0000000199.wav\""))
(in-package :om)(load-lib-for (quote ("OM-pd")))(setf *om-current-persistent* (om-load-patch1 "3 - multithreading" (quote ((let ((box (om-load-editor-box1 "Audio_0000000199.wav" (quote sound) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "a track index for multichannel mixing (0 = no specific track)" "tracknum" 0) (om-load-inputfun (quote input-funbox) "a list of markers (s)" "markers" nil))) (om-make-point 31 580) (om-make-point 314 109) (let ((newobj (let ((thesound (load-sound (om-make-pathname :directory (quote (:relative "out-files")) :device nil :host nil :name "Audio_0000000199" :type "wav") 0 1.0 0))) (when thesound (setf (markers thesound) (quote nil))) thesound))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "Audio_0000000199.wav") (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (scale show-stems notechancolor? cmnpref obj-mode deltapict show-spectrum winpos winsize mode grillestep zoom player inport outport)) (list nil (quote t) nil (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) 0 (om-make-point 0 0) nil (om-make-point 400 20) (om-make-point 370 280) 0 nil 1 (quote :om-audio) nil nil)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "NTH-RANDOM" (quote nth-random) (quote ((om-load-inputfun (quote input-funbox) "a list" "LIST" nil))) (om-make-point 178 490) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "TEXTFILE" (quote textfile) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "input data or text" "exp-list" nil) (om-load-inputfunmenu1 (quote input-funmenu) "append or supersede" "ed-mode" "supersede" (list (list "append" "append") (list "supersede" "supersede"))) (om-load-inputfunmenu1 (quote input-funmenu) "eval interpretation mode" "eval-mode" "list" (list (list "text" "text") (list "data list" "data") (list "list" "list") (list "value" "value"))))) (om-make-point 384 501) (om-make-point 396 288) (load-buffer-textfile (quote ("/home/neimog/Documents/OM/out-files/Audio_0000000001.wav" "/home/neimog/Documents/OM/out-files/Audio_0000000002.wav" "/home/neimog/Documents/OM/out-files/Audio_0000000003.wav" "/home/neimog/Documents/OM/out-files/Audio_0000000004.wav" "/home/neimog/Documents/OM/out-files/Audio_0000000005.wav" "/home/neimog/Documents/OM/out-files/Audio_0000000006.wav" "/home/neimog/Documents/OM/out-files/Audio_0000000007.wav" "/home/neimog/Documents/OM/out-files/Audio_0000000008.wav" "/home/neimog/Documents/OM/out-files/Audio_0000000009.wav" "/home/neimog/Documents/OM/out-files/Audio_0000000010.wav" "/home/neimog/Documents/OM/out-files/Audio_0000000011.wav" "/home/neimog/Documents/OM/out-files/Audio_0000000012.wav" "/home/neimog/Documents/OM/out-files/Audio_0000000013.wav" "/home/neimog/Documents/OM/out-files/Audio_0000000014.wav" "/home/neimog/Documents/OM/out-files/Audio_0000000015.wav" "/home/neimog/Documents/OM/out-files/Audio_0000000016.wav" "/home/neimog/Documents/OM/out-files/Audio_0000000017.wav" "/home/neimog/Documents/OM/out-files/Audio_0000000018.wav" "/home/neimog/Documents/OM/out-files/Audio_0000000019.wav" "/home/neimog/Documents/OM/out-files/Audio_0000000020.wav" "/home/neimog/Documents/OM/out-files/Audio_0000000021.wav" "/home/neimog/Documents/OM/out-files/Audio_0000000022.wav" "/home/neimog/Documents/OM/out-files/Audio_0000000023.wav" "/home/neimog/Documents/OM/out-files/Audio_0000000024.wav" "/home/neimog/Documents/OM/out-files/Audio_0000000025.wav" "/home/neimog/Documents/OM/out-files/Audio_0000000026.wav" "/home/neimog/Documents/OM/out-files/Audio_0000000027.wav" "/home/neimog/Documents/OM/out-files/Audio_0000000028.wav" "/home/neimog/Documents/OM/out-files/Audio_0000000029.wav" "/home/neimog/Documents/OM/out-files/Audio_0000000030.wav" "/home/neimog/Documents/OM/out-files/Audio_0000000031.wav" "/home/neimog/Documents/OM/out-files/Audio_0000000032.wav" "/home/neimog/Documents/OM/out-files/Audio_0000000033.wav" "/home/neimog/Documents/OM/out-files/Audio_0000000034.wav" "/home/neimog/Documents/OM/out-files/Audio_0000000035.wav" "/home/neimog/Documents/OM/out-files/Audio_0000000036.wav" "/home/neimog/Documents/OM/out-files/Audio_0000000037.wav" "/home/neimog/Documents/OM/out-files/Audio_0000000038.wav" "/home/neimog/Documents/OM/out-files/Audio_0000000039.wav" "/home/neimog/Documents/OM/out-files/Audio_0000000040.wav" "/home/neimog/Documents/OM/out-files/Audio_0000000041.wav" "/home/neimog/Documents/OM/out-files/Audio_0000000042.wav" "/home/neimog/Documents/OM/out-files/Audio_0000000043.wav" "/home/neimog/Documents/OM/out-files/Audio_0000000044.wav" "/home/neimog/Documents/OM/out-files/Audio_0000000045.wav" "/home/neimog/Documents/OM/out-files/Audio_0000000046.wav" "/home/neimog/Documents/OM/out-files/Audio_0000000047.wav" "/home/neimog/Documents/OM/out-files/Audio_0000000048.wav" "/home/neimog/Documents/OM/out-files/Audio_0000000049.wav" "/home/neimog/Documents/OM/out-files/Audio_0000000050.wav" "/home/neimog/Documents/OM/out-files/Audio_0000000051.wav" "/home/neimog/Documents/OM/out-files/Audio_0000000052.wav" "/home/neimog/Documents/OM/out-files/Audio_0000000053.wav" "/home/neimog/Documents/OM/out-files/Audio_0000000054.wav" "/home/neimog/Documents/OM/out-files/Audio_0000000055.wav" "/home/neimog/Documents/OM/out-files/Audio_0000000056.wav" "/home/neimog/Documents/OM/out-files/Audio_0000000057.wav" "/home/neimog/Documents/OM/out-files/Audio_0000000058.wav" "/home/neimog/Documents/OM/out-files/Audio_0000000059.wav" "/home/neimog/Documents/OM/out-files/Audio_0000000060.wav" "/home/neimog/Documents/OM/out-files/Audio_0000000061.wav" "/home/neimog/Documents/OM/out-files/Audio_0000000062.wav" "/home/neimog/Documents/OM/out-files/Audio_0000000063.wav" "/home/neimog/Documents/OM/out-files/Audio_0000000064.wav" "/home/neimog/Documents/OM/out-files/Audio_0000000065.wav" "/home/neimog/Documents/OM/out-files/Audio_0000000066.wav" "/home/neimog/Documents/OM/out-files/Audio_0000000067.wav" "/home/neimog/Documents/OM/out-files/Audio_0000000068.wav" "/home/neimog/Documents/OM/out-files/Audio_0000000069.wav" "/home/neimog/Documents/OM/out-files/Audio_0000000070.wav" "/home/neimog/Documents/OM/out-files/Audio_0000000071.wav" "/home/neimog/Documents/OM/out-files/Audio_0000000072.wav" "/home/neimog/Documents/OM/out-files/Audio_0000000073.wav" "/home/neimog/Documents/OM/out-files/Audio_0000000074.wav" "/home/neimog/Documents/OM/out-files/Audio_0000000075.wav" "/home/neimog/Documents/OM/out-files/Audio_0000000076.wav" "/home/neimog/Documents/OM/out-files/Audio_0000000077.wav" "/home/neimog/Documents/OM/out-files/Audio_0000000078.wav" "/home/neimog/Documents/OM/out-files/Audio_0000000079.wav" "/home/neimog/Documents/OM/out-files/Audio_0000000080.wav" "/home/neimog/Documents/OM/out-files/Audio_0000000081.wav" "/home/neimog/Documents/OM/out-files/Audio_0000000082.wav" "/home/neimog/Documents/OM/out-files/Audio_0000000083.wav" "/home/neimog/Documents/OM/out-files/Audio_0000000084.wav" "/home/neimog/Documents/OM/out-files/Audio_0000000085.wav" "/home/neimog/Documents/OM/out-files/Audio_0000000086.wav" "/home/neimog/Documents/OM/out-files/Audio_0000000087.wav" "/home/neimog/Documents/OM/out-files/Audio_0000000088.wav" "/home/neimog/Documents/OM/out-files/Audio_0000000089.wav" "/home/neimog/Documents/OM/out-files/Audio_0000000090.wav" "/home/neimog/Documents/OM/out-files/Audio_0000000091.wav" "/home/neimog/Documents/OM/out-files/Audio_0000000092.wav" "/home/neimog/Documents/OM/out-files/Audio_0000000093.wav" "/home/neimog/Documents/OM/out-files/Audio_0000000094.wav" "/home/neimog/Documents/OM/out-files/Audio_0000000095.wav" "/home/neimog/Documents/OM/out-files/Audio_0000000096.wav" "/home/neimog/Documents/OM/out-files/Audio_0000000097.wav" "/home/neimog/Documents/OM/out-files/Audio_0000000098.wav" "/home/neimog/Documents/OM/out-files/Audio_0000000099.wav" "/home/neimog/Documents/OM/out-files/Audio_0000000100.wav" "")) (quote textfile) "supersede" "list") nil nil (pairlis (quote (winpos winsize)) (list (om-make-point 10 40) (om-make-point 335 275))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "PD-OPEN-PATCHES" (quote pd-open-patches) (quote ((om-load-inputfun (quote input-funbox) "Use PD patches inside OM-Sharp" "PATCH" nil))) (om-make-point 57 321) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 4" (quote t) (quote nil) (om-make-point 550 361) (om-make-point 28 32) 4 "4" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "PD-MULTITHREADING" (quote pd-multithreading) (quote ((om-load-inputfun (quote input-funbox) "Use PD patches inside OM-Sharp" "PATCH-LIST" nil) (om-load-inputfun (quote input-funbox) "Number of Threads" "PATCHES-BY-THREAD" nil))) (om-make-point 490 404) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 595 190) (om-make-point 36 32) 100 "100" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 529 86) (om-make-point 43 32) 300 "300" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 578 69) (om-make-point 51 32) 1200 "1200" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM-RANDOM" (quote om-random) (quote ((om-load-inputfun (quote input-funbox) "min" "LOW" 300) (om-load-inputfun (quote input-funbox) "max" "HIGH" 1200))) (om-make-point 528 128) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "REPEAT-N" (quote repeat-n) (quote ((om-load-inputfun (quote input-funbox) "something" "SELF" 1) (om-load-inputfun (quote input-funbox) "times" "N" 40))) (om-make-point 544 238) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "MAPCAR" (quote mapcar) (quote ((om-load-inputfun (quote input-funbox) "FUNCTION" "FUNCTION" nil) (om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 461 354) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "multithreading" (om-load-patch-abs1 "multithreading" (quote ((let ((box (om-load-boxcall (quote genfun) "PD-MK-AUDIO-NAME" (quote pd-mk-audio-name) (quote nil) (om-make-point 258 138) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "PD-MK-LINE" (quote pd-mk-line) (quote ((om-load-inputfun (quote input-funbox) "Use PD patches inside OM-Sharp" "PATCH" nil) (om-load-inputkeyword (quote input-keyword) "" "sound-out" (quote :sound-out) nil nil) (om-load-inputkeyword (quote input-keyword) "" "var" (quote :var) nil nil) (om-load-inputkeyword (quote input-keyword) "" "offline" (quote :offline) nil nil))) (om-make-point 162 330) (om-make-point 373 68) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input 2" 1 (om-make-point 474 25) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 50 92) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 324 422) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "TMPFILE" (quote tmpfile) (quote ((om-load-inputfun (quote input-funbox) "file name" "PATH" ""))) (om-make-point 290 257) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 550 257) (om-make-point 25 32) (quote t) "t" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "X-APPEND" (quote x-append) (quote ((om-load-inputfun (quote input-funbox) "first element" "L1?" nil) (om-load-inputfun (quote input-funbox) "second element" "L2?" nil))) (om-make-point 411 129) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 398 81) (om-make-point 42 34) (quote freq) "freq" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LIST" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 426 195) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((3 0 1 0 nil 0) (5 0 1 1 nil 0) (9 0 1 2 nil 0) (6 0 1 3 nil 0) (1 0 4 0 nil 0) (0 0 5 0 nil 0) (8 0 7 0 nil 0) (2 0 7 1 nil 0) (7 0 9 0 nil 0))) 7.01 nil "" (om-make-point 0 0) (om-make-point 713 481)) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil) (om-load-inputfun (quote input-funbox) "" "input 2" nil))) (om-make-point 2380/11 3004/11) (om-make-point 262 68) (list nil) "l" "multithreading"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "SINGLE-ITEM-LIST" (quote single-item-list) (quote ((om-load-inputfun (quote input-funbox) "list of choices" "items" (list "uno" "dos" "tres")))) (om-make-point 22 146) (om-make-point 178 123) (let ((rep (om-make-dialog-item (quote single-item-list) (om-make-point 1 1) (om-make-point 154 107) "untitled" :range (quote ("Patch Model - Manipulation of Audios.pd" "Patch Model - Generating Audios.pd" "3 - spacialization-of-note.pd" "1 - mk-senoide.pd"))))) (setf (di-data rep) (quote ("Patch Model - Manipulation of Audios.pd" "Patch Model - Generating Audios.pd" "3 - spacialization-of-note.pd" "1 - mk-senoide.pd"))) (om-set-selected-item-index rep 3) rep) "x" nil (pairlis (quote (winpos winsize)) (list (om-make-point 10 40) (om-make-point 335 275))) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "PD-PATCHES-LIST" (quote pd-patches-list) (quote nil) (om-make-point 64 73) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((1 0 0 0 nil 0) (5 0 1 0 nil 0) (5 0 2 1 nil 0) (13 0 3 0 nil 0) (11 0 5 0 nil 0) (4 0 5 1 nil 0) (7 0 9 0 nil 0) (8 0 9 1 nil 0) (9 0 10 0 nil 0) (6 0 10 1 nil 0) (12 0 11 0 nil 0) (10 0 11 1 nil 0) (13 0 12 0 nil 0) (14 0 13 0 nil 0))) nil 7.01))
